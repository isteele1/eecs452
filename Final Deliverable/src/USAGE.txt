Ultrasonic Anti-Spoofing Algorithm
==========================
This system combines STM32 firmware and Python visualization to detect ultrasonic sensor spoofing attacks. The STM32 handles real-time sensor data processing while a Python script provides live visualization of raw data, filtered signals, and frequency-domain analysis.

How to Run
–––––––––––––––
1. STM32 Firmware
   – Import all project files into STM32CubeIDE
   – Build and flash to board via ST-LINK
   – Ensure serial port is free for Python connection

2. Python Visualization
    – Requirements: Python 3.9+, `pyserial`, `matplotlib`, `numpy`
    – Run: `python plotting.py --port <COM_PORT>
    – Parameters must match STM32 code settings:
    – N: FFT window size (default 40)
    – L: Stride length (default 40)
    – port: Serial port (e.g., COM3 on Windows)

3. System Startup Order
    – Power STM32 board
    – Start Python script
    – Wait for "Serial connection established" message

Live Controls
–––––––––––––––
– STM32 Blue Button (PF5): Single Press cycles attack modes: No Attack → Jamming (50ms pulses) → Random Spoofing (500-1500ms) → No Attack
– 'q' key on PC keyboard: Quits the Python program safely and entirely. Shuts down plots and ends the code. Useful if the plotting memory fills up, there is an error with serial, or the code needs to be shut down for some other reason.
– 'p' key on PC keyboard: Pauses the Python plots. Does not stop the sensors from reading data or serial from transmitting it, so when it is pressed again, data will continue to be transmitted live with no backlog. Useful for keeping certain data on-screen for screenshots or to demonstrate certain aspects of the program to an audience, like we did with our design expo.

Operation Modes
–––––––––––––––
Normal Operation
– Defender sensor updates every 50ms
– UART streams: `RAW_DIST FILTERED_DIST FFT_BINS...`
– Python displays:
    – Time-domain plot (distance vs time)
    – Spectrogram (frequency vs time)
    – Attack status in plot title

Attack Modes
– Jamming: Regular 50ms ultrasonic bursts
– Spoofing: Randomized pulse intervals
– Detection triggers visible as:
    – High-frequency components in spectrogram
    – Mismatch between raw/filtered distances

Performance Notes
– ~200ms end-to-end latency (sensor→STM32→PC)
– CPU Usage:
    – STM32: 65-70% (peaks during FFT)
    – Python: 15-20% (matplotlib overhead)

Troubleshooting
–––––––––––––––
**| Symptom | Solution |**
| No Python plots | Check COM port and baud rate (115200) |
| Gaps in data | Reduce N/L values or increase sampling |
| "Serial busy" errors | Disconnect IDE serial monitor first |
| Frozen visualization  | Press 'p' twice to reset buffer |

Expected Behavior
–––––––––––––––
Successful Startup
– STM32 blue LED solid on
– Python console shows connection message
– Matplotlib window with 3 subplots:
    – Distance vs Time (attack status in title)
    – Filtered vs Raw comparison
    – Frequency spectrum

During Attacks
– Jamming: Regular spikes in raw distance plot
– Spoofing: Random high-frequency FFT components

Error Handling
– Python ignores serial framing errors automatically
– STM32 auto-reconnects on USB replug