Ultrasonic Anti-Spoofing Algorithm
==========================
This file provides documentation on setup, compilation, and installation of the tools required in the project.

Prerequisites
-------------
- **Hardware:**
  - NUCLEO-L4R5ZI-P development board
  - Two HC-SR04 ultrasonic sensors
  - Jumper wires
  - USB cable (Type-A to Micro-B)

- **Software:**
  - STM32CubeIDE (v1.5.0 or later) [Download from STMicroelectronics]
  - ST-LINK USB driver (if not already installed)
  - Serial terminal program (e.g., Tera Term, PuTTY)

Project Files
-------------
Copy the following files into your STM32CubeIDE project directory:
- main.cpp
- main.h
- HoltEMA-1.h
- HoltEMA-1.cpp
- kiss_fft.h
- kiss_fft_guts.h
- kiss_fft.c
- stm32l4xx_it.h
- stm32l4xx_hal_conf.h

(Include any other STM32CubeIDE-generated files for your target board.)

Project Setup
-------------
1. **Create a New Project in STM32CubeIDE:**
   - Go to `File > New > STM32 Project`
   - Select "NUCLEO-L4R5ZI-P" as the target board
   - Choose "Empty" project type and click "Finish"

2. **Add Source Files:**
   - Right-click the project in Project Explorer
   - Select `Import > General > File System`
   - Import all files listed above into the `Src` and `Inc` directories as appropriate

3. **Configure Pins and Peripherals:**
   - Open the `.ioc` file in STM32CubeIDE
   - Set up:
     - PC8, PC9, PC10, PC11 as GPIO (for TRIG/ECHO)
     - PF5 as GPIO input with interrupt (for mode button)
     - LPUART1 and USART1 at 115200 baud (for UART output)
     - TIM1 and TIM2 for precise timing
     - RNG for random spoofing intervals
   - Enable required HAL modules in `stm32l4xx_hal_conf.h` (TIM, UART, RNG, GPIO, DMA)

4. **Check Build Settings:**
   - Ensure C++17 is enabled in project properties
   - Add `USE_HAL_DRIVER` and `__GNUC__` to preprocessor symbols if not present

Compiling and Flashing
----------------------
1. **Build the Project:**
   - Click the "Build" (hammer) icon in STM32CubeIDE
   - Resolve any errors or missing includes

2. **Connect the Board:**
   - Plug the NUCLEO board into your computer via USB (CN1)
   - Ensure the board powers up (PWR LED on)

3. **Flash the Firmware:**
   - Click the "Debug" or "Run" button in STM32CubeIDE
   - The IDE will program the board using the on-board ST-LINK

4. **Monitor Serial Output:**
   - Open your serial terminal and connect to the correct COM port at 115200 baud, 8N1
   - You should see distance measurements and FFT data streaming every 50 ms

Wiring Summary
--------------
| Function         | NUCLEO Pin | Sensor Pin |
|------------------|------------|------------|
| Defender TRIG    | PC10       | TRIG       |
| Defender ECHO    | PC11       | ECHO       |
| Attacker TRIG    | PC8        | TRIG       |
| Attacker ECHO    | PC9        | ECHO       |
| Mode Button      | PF5        | (Button)   |
| UART TX/RX       | LPUART1    | (USB VCP)  |

Notes and Special Requirements
------------------------------
- **KISS FFT:** The project uses the open-source KISS FFT library for spectral analysis. No special installation is needed; the provided `.c` and `.h` files are included in the build.
- **HoltEMA:** Filtering is implemented in C++ (HoltEMA-1.h/cpp). Ensure your project is configured for C++ compilation.
- **No external libraries** beyond STM32 HAL, KISS FFT, and standard C++ are required.
- **If using a different STM32 board:** Update the pin assignments and peripheral initializations in the `.ioc` file and code as needed.

Troubleshooting
---------------
- If the board is not detected, install or update the ST-LINK USB driver.
- If you see no UART output, check wiring and ensure LPUART1 is correctly configured.
- For build errors, verify all source/header files are present and included in the project.

References
----------
- STM32CubeIDE User Guide (https://wiki.st.com/stm32mcu/wiki/STM32CubeIDE:Introduction_to_STM32CubeIDE)
- NUCLEO-L4R5ZI-P User Manual (https://www.st.com/resource/en/user_manual/um2179-stm32-nucleo144-boards-mb1312-stmicroelectronics.pdf)
- HC-SR04 Datasheet (https://cdn.sparkfun.com/datasheets/Sensors/Proximity/HCSR04.pdf)


Setting Up Python Plotting
–––––––––––––––
Make sure the proper dependencies for the Python file have been installed. Go to a Unix terminal in the same directory as plotting.py and run:
>> pip install pyserial matplotlib numpy

Plug in the STM32 to your PC and find its COM port by running:
>> python3 plotting.py --port COM3

Enter this port name into the top of plotting.py. Run the program in your Python IDE of choice.
